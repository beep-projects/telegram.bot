#!/bin/bash
# ---------------------------------------------------
# this file is based on work obtained from https://github.com/NicolasBernaerts/debian-scripts/tree/master/telegram
#
# Copyright (c) 2022, The beep-projects contributors
# this file originated from https://github.com/beep-projects
# Do not remove the lines above.
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/
#
#
# Send notification to a telegram account through a bot account
# Configuration is stored in /etc/telegram/telegram.conf
# Depends on curl 
# ---------------------------------------------------

# Initialize all the option variables.
# This ensures we are not contaminated by variables from the environment.
NOTIFY_TEXT=""
DISPLAY_TEXT=""
DISPLAY_PICT=""
DISPLAY_ICON=""
DISPLAY_MODE="markdown"
DISABLE_PREVIEW="false"
DISPLAY_SILENT="false"
QUIET="false"

# Configuration file
FILE_CONF=/etc/telegram/telegram.conf

#######################################
# Show help.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Prints usage information to stdout
#######################################
function help() {
cat <<END
  telegram.sh: Tool to send a message to a Telegram User or Channel.
  Message is sent from a Telegram Bot and can contain icon, text, image and/or document.
  Main parameters are :
    -h/-?/--help        display this help and exit
    -t/--text <text>       Text of the message (use - for piped text)
    -f/--file <file>       File holding the text of the message
    -p/--photo <file>      Image to display
    -d/--document <file>   Document to transfer
  Options are :
    --title <title>     Title of the message (if text message)
    --html              Use HTML mode for text content (markdown by default)
    --disable_preview   Don't create previews for links, image and/or document
    --silent            Send message in silent mode (no user notification on the client)
    --quiet             Don't print message to stdout
    -c/--config <file>     use alternate config file, instead of default ${FILE_CONF}
    -u/--user <user-id>    Recipient User or Channel ID (replaces user-id= in ${FILE_CONF})
    -k/--key <api-key>     API Key of your Telegram bot (replaces api-key= in ${FILE_CONF})
  Optional icons are :
    --success           Add a success icon
    --warning           Add a warning icon
    --error             Add an error icon
    --question          Add a question mark icon
    --icon <code>       Add an icon by UTF code (ex 1F355)
  Here is an example of piped text :
    echo 'text to be displayed' | telegram --success --text -

END
}

#######################################
# Print error message.
# Globals:
#   None
# Arguments:
#   $1 = Error message
#   $2 = return code (optional, default 1)
# Outputs:
#   Prints an error message to stderr
#######################################
function error {
    printf "%s\n" "${1}" >&2 ## Send message to stderr.
    exit "${2-1}" ## Return a code specified by $2, or 1 by default.
}


# -------------------------------------------------------
#   Check tools availability
# -------------------------------------------------------

command -v curl >/dev/null 2>&1 || { error "[Error] Please install curl"; }

# -------------------------------------------------------
#   Loop to load arguments
# -------------------------------------------------------

# if no argument, display help
if [ $# -eq 0 ] 
then
  help
fi

# loop to retrieve arguments
while :; do
  case $1 in
    -h|-\?|--help)
      help # show help for this script
      exit
      ;;
    -t|--text)
      if [ "$2" ]; then
        DISPLAY_TEXT=$2
        shift
      else
        error '"--text" requires a non-empty option argument.'
      fi
      ;;
    -f|--file)
      if [ "$2" ]; then
        TEXTFILE=$2
        shift
      else
        error '"--file" requires a non-empty option argument.'
      fi
      ;;
    -p|--photo)
      if [ "$2" ]; then
        DISPLAY_PICT=$2
        shift
      else
        error '"--photo" requires a non-empty option argument.'
      fi
      ;;
    -d|--document)
      if [ "$2" ]; then
        DOCUMENT=$2
        shift
      else
        error '"--document" requires a non-empty option argument.'
      fi
      ;;
    --title)
      if [ "$2" ]; then
        DISPLAY_TITLE=$2
        shift
      else
        error '"--title" requires a non-empty option argument.'
      fi
      ;;
    -c|--config)
      if [ "$2" ]; then
        FILE_CONF=$2
        shift
      else
        error '"--config" requires a non-empty option argument.'
      fi
      ;;
    -u|--user)
      if [ "$2" ]; then
        USER_ID=$2
        shift
      else
        error '"--user" requires a non-empty option argument.'
      fi
      ;;
    -k|--key)
      if [ "$2" ]; then
        API_KEY=$2
        shift
      else
        error '"--key" requires a non-empty option argument.'
      fi
      ;;
    --html)
      DISPLAY_MODE="html"
      shift
      ;;
    --disable_preview)
      DISABLE_PREVIEW="true"
      shift
      ;;
    --silent)
      DISPLAY_SILENT="true"
      shift
      ;;
    --quiet)
      QUIET="true"
      shift
      ;;
    --success)
      DISPLAY_ICON=$(echo -e "\U2705")
      shift
      ;;
    --warning)
      DISPLAY_ICON=$(echo -e "\U26A0")
      shift
      ;;
    --error)
      DISPLAY_ICON=$(echo -e "\U1F6A8")
      shift
      ;;
    --question)
      DISPLAY_ICON=$(echo -e "\U2753")
      shift
      ;;
    -i|--icon)
      if [ "$2" ]; then
        DISPLAY_ICON=$(echo -e "\U$2")
        shift
      else
        error '"--icon" requires a non-empty option argument.'
      fi
      ;;
    --) # End of all options.
      shift
      break
      ;;
    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      ;;
    *) # Default case: No more options, so break out of the loop.
      break
  esac
  shift
done

# -------------------------------------------------------
#   Read configuration
# -------------------------------------------------------

# if configuration file is present
if [ -f "${FILE_CONF}" ]
then
	# display used config file unless --quiet parameter is used
	[ "${QUIET}" = "false" ] && echo "[Info] Using configuration file ${FILE_CONF}"

	# if needed, load from configuration file
	[ "${API_KEY}" = "" ] && API_KEY=$( <"${FILE_CONF}" grep "api-key=" | cut -d'=' -f2 )
	[ "${USER_ID}" = "" ] && USER_ID=$( <"${FILE_CONF}" grep "user-id=" | cut -d'=' -f2)

	# load socks proxy from configuration file
	SOCKS_PROXY=$( <"${FILE_CONF}" grep "socks-proxy=" | cut -d'=' -f2)
else
	# display warning unless --quiet parameter is used
	[ "${QUIET}" = "false" ] && echo "[Warning] Configuration file missing ${FILE_CONF}"
fi

# check API key and User ID
[ "${API_KEY}" = "" ] && { echo "[Error] Please provide API key or set it in ${FILE_CONF}"; exit 1; }
[ "${USER_ID}" = "" ] && { echo "[Error] Please provide User ID or set it in ${FILE_CONF}"; exit 1; }

# -------------------------------------------------------
#   Check for file existence
# -------------------------------------------------------

# if text file, check for text file
[ "${TEXTFILE}" != "" ] && [ ! -f "${TEXTFILE}" ] && { echo "[error] Text file ${TEXTFILE} doesn't exist"; exit 1; }

# if picture, check for image file
[ "${DISPLAY_PICT}" != "" ] && [ ! -f "${DISPLAY_PICT}" ] && { echo "[error] Image file ${DISPLAY_PICT} doesn't exist"; exit 1; }

# if document, check for document file
[ "${DOCUMENT}" != "" ] && [ ! -f "${DOCUMENT}" ] && { echo "[error] Document file ${DOCUMENT} doesn't exist"; exit 1; }

# -------------------------------------------------------
#   String preparation : space and line break
# -------------------------------------------------------

# if text is a file, get its content
[ -f "${TEXTFILE}" ] && DISPLAY_TEXT=$(cat "${TEXTFILE}")

# if text is to be read from pipe, get it
[ ! -t 0 ] && [ "${DISPLAY_TEXT}" = "-" ] && DISPLAY_TEXT=$(cat)

# convert \n to LF
#DISPLAY_TEXT=$(echo "${DISPLAY_TEXT}" | sed 's:\\n:\n:g')
DISPLAY_TEXT="${DISPLAY_TEXT//'\n'/$'\n'}"

# if icon defined, include ahead of notification
[ "${DISPLAY_ICON}" != "" ] && NOTIFY_TEXT="${DISPLAY_ICON} "

# if title defined, add it with line break
if [ "${DISPLAY_TITLE}" != "" ]
then
	# convert title according to Markdown or HTML
	[ "${DISPLAY_MODE}" = "html" ] && NOTIFY_TEXT="${NOTIFY_TEXT}<b>${DISPLAY_TITLE}</b>%0A%0A" \
				       || NOTIFY_TEXT="${NOTIFY_TEXT}*${DISPLAY_TITLE}*%0A%0A"
fi

# if text defined, replace \n by HTML line break
[ "${DISPLAY_TEXT}" != "" ] && NOTIFY_TEXT="${NOTIFY_TEXT}${DISPLAY_TEXT}"

# -------------------------------------------------------
#   Notification
# -------------------------------------------------------

# default option
ARR_OPTIONS=( "--silent" "--insecure" )

# if needed, socks5 option
[ "${SOCKS_PROXY}" != "" ] && ARR_OPTIONS=( "${ARR_OPTIONS[@]}" "--socks5-hostname" "${SOCKS_PROXY}" )

# if photo defined, display it with icon and caption
if [ "${DISPLAY_PICT}" != "" ]
then
  # display image
  CURL_RESULT=$(curl "${ARR_OPTIONS[@]}" --form chat_id="${USER_ID}" --form disable_notification="${DISPLAY_SILENT}" --form disable_web_page_preview="${DISABLE_PREVIEW}" --form photo="@${DISPLAY_PICT}" --form caption="${NOTIFY_TEXT}" "https://api.telegram.org/bot${API_KEY}/sendPhoto")

# if document defined, send it with icon and caption
elif [ "${DOCUMENT}" != "" ]
then
  # transfer document
  CURL_RESULT=$(curl "${ARR_OPTIONS[@]}" --form chat_id="${USER_ID}" --form disable_notification="${DISPLAY_SILENT}" --form disable_web_page_preview="${DISABLE_PREVIEW}" --form document="@${DOCUMENT}" --form caption="${NOTIFY_TEXT}" "https://api.telegram.org/bot${API_KEY}/sendDocument")

# else, if text is defined, display it with icon and title
elif [ "${NOTIFY_TEXT}" != "" ]
then
  # display text message
  CURL_RESULT=$(curl "${ARR_OPTIONS[@]}" --data chat_id="${USER_ID}" --data "disable_notification=${DISPLAY_SILENT}" --data "disable_web_page_preview=${DISABLE_PREVIEW}" --data "parse_mode=${DISPLAY_MODE}" --data "text=${NOTIFY_TEXT}" "https://api.telegram.org/bot${API_KEY}/sendMessage")

#  else, nothing, error
else
  # display error message unless --quiet parameter is used
  [ "${QUIET}" = "false" ] && echo "[Error] Nothing to notify"
  exit 1
fi

# check curl request result
echo "${CURL_RESULT}" | grep '"ok":true' > /dev/null || { echo "${CURL_RESULT}"; exit 1; }

# end
exit 0
